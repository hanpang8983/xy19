<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

    <!-- 启动Spring注解 -->
    <context:annotation-config />
    <!-- 扫描 -->
    <context:component-scan base-package="com.hanpang">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 读取数据库的属性文件 -->
    <context:property-placeholder location="classpath:/config/jdbc.properties" />
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3" />
        <!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
        <property name="minIdle" value="5" />
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

    </bean>
    
    <!-- MyBatis配置SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- MyBatis的核心配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 对应的映射文件 -->
        <property name="mapperLocations" value="classpath*:com/hanpang/**/model/*Mapper.xml"/>
    </bean>
    
    <!-- MyBatis通过映射文件自动生成实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 基础的扫描包 -->
        <property name="basePackage" >
            <value>
                com.hanpang.framework.rbac.user.mapper,
                com.hanpang.framework.rbac.role.mapper,
                com.hanpang.framework.rbac.menu.mapper,
                com.hanpang.framework.rbac.logger.mapper
            </value>
        
        </property>
        <!-- 配置SqlSessionFactory的名称 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置哪些方法需要使用事务管理器进行管理 -->
    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有的方法都是只读的 -->
            <tx:method name="*" read-only="true"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="mod*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="change*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置AOP，通过AOP让事务管理在哪个层次其作用 -->
    <aop:config>
        <!-- 定义的是切入点 -->
        <aop:pointcut expression="execution(* com.hanpang..*Service.*(..))" id="serviceMethodPointCut"/>
        <aop:advisor advice-ref="serviceAdvice" pointcut-ref="serviceMethodPointCut"/>
        <aop:aspect ref="operationLogAspect" order="1">
            <aop:pointcut expression="(execution(* com.hanpang..*Service.add*(..))
                                  or execution(* com.hanpang..*Service.update*(..))
                                  or execution(* com.hanpang..*Service.change*(..))
                                  or execution(* com.hanpang..*Service.del*(..))
                                  )
                                  and !bean(loginLogService)
                                  and !bean(operationLogService)" id="operationServiceMethodPointCut" />
            <aop:after-returning method="returnAdvice" pointcut-ref="operationServiceMethodPointCut"/>
        </aop:aspect>
    </aop:config>
    
    <!-- 配置JDBCTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource"/>

    <!-- 配置验证码信息 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">no</prop> 
                        <prop key="kaptcha.textproducer.impl">com.google.code.kaptcha.text.impl.DefaultTextCreator</prop>   
                        <prop key="kaptcha.border.color">186,196,201</prop>  
                        <prop key="kaptcha.textproducer.font.color">black</prop>  
                        <prop key="kaptcha.textproducer.char.string">abcde2345678gfynmnpwx</prop>
                        <prop key="kaptcha.image.width">135</prop>  
                        <prop key="kaptcha.image.height">45</prop>  
                        <prop key="kaptcha.textproducer.font.size">40</prop>  
                        <prop key="kaptcha.session.key">shxt_code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop> 
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop> 
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
        
        <!-- 
            kaptcha.border  是否有边框  默认为true  我们可以自己设置yes，no  
            kaptcha.border.color   边框颜色   默认为Color.BLACK  
            kaptcha.border.thickness  边框粗细度  默认为1  
            kaptcha.producer.impl   验证码生成器  默认为DefaultKaptcha  
            kaptcha.textproducer.impl   验证码文本生成器  默认为DefaultTextCreator  
            kaptcha.textproducer.char.string   验证码文本字符内容范围  默认为abcde2345678gfynmnpwx  
            kaptcha.textproducer.char.length   验证码文本字符长度  默认为5  
            kaptcha.textproducer.font.names    验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)  
            kaptcha.textproducer.font.size   验证码文本字符大小  默认为40  
            kaptcha.textproducer.font.color  验证码文本字符颜色  默认为Color.BLACK  
            kaptcha.textproducer.char.space  验证码文本字符间距  默认为2  
            kaptcha.noise.impl    验证码噪点生成对象  默认为DefaultNoise  
            kaptcha.noise.color   验证码噪点颜色   默认为Color.BLACK  
            kaptcha.obscurificator.impl   验证码样式引擎  默认为WaterRipple  
            kaptcha.word.impl   验证码文本字符渲染   默认为DefaultWordRenderer  
            kaptcha.background.impl   验证码背景生成器   默认为DefaultBackground  
            kaptcha.background.clear.from   验证码背景颜色渐进   默认为Color.LIGHT_GRAY  
            kaptcha.background.clear.to   验证码背景颜色渐进   默认为Color.WHITE  
            kaptcha.image.width   验证码图片宽度  默认为200  
            kaptcha.image.height  验证码图片高度  默认为50  
         -->
        
    </bean>
    
    <!-- 实例化 -->
    <bean id="operationLogAspect" class="com.hanpang.framework.rbac.logger.aspect.OperationLogAspect"/>
    


</beans>
